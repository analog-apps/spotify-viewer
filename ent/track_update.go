// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/albe2669/spotify-viewer/ent/predicate"
	"github.com/albe2669/spotify-viewer/ent/schema/pulid"
	"github.com/albe2669/spotify-viewer/ent/track"
)

// TrackUpdate is the builder for updating Track entities.
type TrackUpdate struct {
	config
	hooks    []Hook
	mutation *TrackMutation
}

// Where appends a list predicates to the TrackUpdate builder.
func (tu *TrackUpdate) Where(ps ...predicate.Track) *TrackUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TrackUpdate) SetUpdatedAt(t time.Time) *TrackUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetTrackID sets the "track_id" field.
func (tu *TrackUpdate) SetTrackID(pu pulid.ID) *TrackUpdate {
	tu.mutation.SetTrackID(pu)
	return tu
}

// SetNillableTrackID sets the "track_id" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableTrackID(pu *pulid.ID) *TrackUpdate {
	if pu != nil {
		tu.SetTrackID(*pu)
	}
	return tu
}

// SetName sets the "name" field.
func (tu *TrackUpdate) SetName(s string) *TrackUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableName(s *string) *TrackUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetArtists sets the "artists" field.
func (tu *TrackUpdate) SetArtists(s []string) *TrackUpdate {
	tu.mutation.SetArtists(s)
	return tu
}

// AppendArtists appends s to the "artists" field.
func (tu *TrackUpdate) AppendArtists(s []string) *TrackUpdate {
	tu.mutation.AppendArtists(s)
	return tu
}

// SetArtistsGenres sets the "artists_genres" field.
func (tu *TrackUpdate) SetArtistsGenres(s []string) *TrackUpdate {
	tu.mutation.SetArtistsGenres(s)
	return tu
}

// AppendArtistsGenres appends s to the "artists_genres" field.
func (tu *TrackUpdate) AppendArtistsGenres(s []string) *TrackUpdate {
	tu.mutation.AppendArtistsGenres(s)
	return tu
}

// SetAlbumName sets the "album_name" field.
func (tu *TrackUpdate) SetAlbumName(s string) *TrackUpdate {
	tu.mutation.SetAlbumName(s)
	return tu
}

// SetNillableAlbumName sets the "album_name" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableAlbumName(s *string) *TrackUpdate {
	if s != nil {
		tu.SetAlbumName(*s)
	}
	return tu
}

// SetAlbumImageURI sets the "album_image_uri" field.
func (tu *TrackUpdate) SetAlbumImageURI(s string) *TrackUpdate {
	tu.mutation.SetAlbumImageURI(s)
	return tu
}

// SetNillableAlbumImageURI sets the "album_image_uri" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableAlbumImageURI(s *string) *TrackUpdate {
	if s != nil {
		tu.SetAlbumImageURI(*s)
	}
	return tu
}

// SetDurationMs sets the "duration_ms" field.
func (tu *TrackUpdate) SetDurationMs(i int32) *TrackUpdate {
	tu.mutation.ResetDurationMs()
	tu.mutation.SetDurationMs(i)
	return tu
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableDurationMs(i *int32) *TrackUpdate {
	if i != nil {
		tu.SetDurationMs(*i)
	}
	return tu
}

// AddDurationMs adds i to the "duration_ms" field.
func (tu *TrackUpdate) AddDurationMs(i int32) *TrackUpdate {
	tu.mutation.AddDurationMs(i)
	return tu
}

// SetURI sets the "uri" field.
func (tu *TrackUpdate) SetURI(s string) *TrackUpdate {
	tu.mutation.SetURI(s)
	return tu
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableURI(s *string) *TrackUpdate {
	if s != nil {
		tu.SetURI(*s)
	}
	return tu
}

// Mutation returns the TrackMutation object of the builder.
func (tu *TrackUpdate) Mutation() *TrackMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TrackUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TrackUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TrackUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TrackUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TrackUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := track.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TrackUpdate) check() error {
	if v, ok := tu.mutation.TrackID(); ok {
		if err := track.TrackIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "track_id", err: fmt.Errorf(`ent: validator failed for field "Track.track_id": %w`, err)}
		}
	}
	return nil
}

func (tu *TrackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(track.Table, track.Columns, sqlgraph.NewFieldSpec(track.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(track.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.TrackID(); ok {
		_spec.SetField(track.FieldTrackID, field.TypeString, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(track.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Artists(); ok {
		_spec.SetField(track.FieldArtists, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedArtists(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, track.FieldArtists, value)
		})
	}
	if value, ok := tu.mutation.ArtistsGenres(); ok {
		_spec.SetField(track.FieldArtistsGenres, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedArtistsGenres(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, track.FieldArtistsGenres, value)
		})
	}
	if value, ok := tu.mutation.AlbumName(); ok {
		_spec.SetField(track.FieldAlbumName, field.TypeString, value)
	}
	if value, ok := tu.mutation.AlbumImageURI(); ok {
		_spec.SetField(track.FieldAlbumImageURI, field.TypeString, value)
	}
	if value, ok := tu.mutation.DurationMs(); ok {
		_spec.SetField(track.FieldDurationMs, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.AddedDurationMs(); ok {
		_spec.AddField(track.FieldDurationMs, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.URI(); ok {
		_spec.SetField(track.FieldURI, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{track.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TrackUpdateOne is the builder for updating a single Track entity.
type TrackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TrackMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TrackUpdateOne) SetUpdatedAt(t time.Time) *TrackUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetTrackID sets the "track_id" field.
func (tuo *TrackUpdateOne) SetTrackID(pu pulid.ID) *TrackUpdateOne {
	tuo.mutation.SetTrackID(pu)
	return tuo
}

// SetNillableTrackID sets the "track_id" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableTrackID(pu *pulid.ID) *TrackUpdateOne {
	if pu != nil {
		tuo.SetTrackID(*pu)
	}
	return tuo
}

// SetName sets the "name" field.
func (tuo *TrackUpdateOne) SetName(s string) *TrackUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableName(s *string) *TrackUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetArtists sets the "artists" field.
func (tuo *TrackUpdateOne) SetArtists(s []string) *TrackUpdateOne {
	tuo.mutation.SetArtists(s)
	return tuo
}

// AppendArtists appends s to the "artists" field.
func (tuo *TrackUpdateOne) AppendArtists(s []string) *TrackUpdateOne {
	tuo.mutation.AppendArtists(s)
	return tuo
}

// SetArtistsGenres sets the "artists_genres" field.
func (tuo *TrackUpdateOne) SetArtistsGenres(s []string) *TrackUpdateOne {
	tuo.mutation.SetArtistsGenres(s)
	return tuo
}

// AppendArtistsGenres appends s to the "artists_genres" field.
func (tuo *TrackUpdateOne) AppendArtistsGenres(s []string) *TrackUpdateOne {
	tuo.mutation.AppendArtistsGenres(s)
	return tuo
}

// SetAlbumName sets the "album_name" field.
func (tuo *TrackUpdateOne) SetAlbumName(s string) *TrackUpdateOne {
	tuo.mutation.SetAlbumName(s)
	return tuo
}

// SetNillableAlbumName sets the "album_name" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableAlbumName(s *string) *TrackUpdateOne {
	if s != nil {
		tuo.SetAlbumName(*s)
	}
	return tuo
}

// SetAlbumImageURI sets the "album_image_uri" field.
func (tuo *TrackUpdateOne) SetAlbumImageURI(s string) *TrackUpdateOne {
	tuo.mutation.SetAlbumImageURI(s)
	return tuo
}

// SetNillableAlbumImageURI sets the "album_image_uri" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableAlbumImageURI(s *string) *TrackUpdateOne {
	if s != nil {
		tuo.SetAlbumImageURI(*s)
	}
	return tuo
}

// SetDurationMs sets the "duration_ms" field.
func (tuo *TrackUpdateOne) SetDurationMs(i int32) *TrackUpdateOne {
	tuo.mutation.ResetDurationMs()
	tuo.mutation.SetDurationMs(i)
	return tuo
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableDurationMs(i *int32) *TrackUpdateOne {
	if i != nil {
		tuo.SetDurationMs(*i)
	}
	return tuo
}

// AddDurationMs adds i to the "duration_ms" field.
func (tuo *TrackUpdateOne) AddDurationMs(i int32) *TrackUpdateOne {
	tuo.mutation.AddDurationMs(i)
	return tuo
}

// SetURI sets the "uri" field.
func (tuo *TrackUpdateOne) SetURI(s string) *TrackUpdateOne {
	tuo.mutation.SetURI(s)
	return tuo
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableURI(s *string) *TrackUpdateOne {
	if s != nil {
		tuo.SetURI(*s)
	}
	return tuo
}

// Mutation returns the TrackMutation object of the builder.
func (tuo *TrackUpdateOne) Mutation() *TrackMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TrackUpdate builder.
func (tuo *TrackUpdateOne) Where(ps ...predicate.Track) *TrackUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TrackUpdateOne) Select(field string, fields ...string) *TrackUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Track entity.
func (tuo *TrackUpdateOne) Save(ctx context.Context) (*Track, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TrackUpdateOne) SaveX(ctx context.Context) *Track {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TrackUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TrackUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TrackUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := track.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TrackUpdateOne) check() error {
	if v, ok := tuo.mutation.TrackID(); ok {
		if err := track.TrackIDValidator(string(v)); err != nil {
			return &ValidationError{Name: "track_id", err: fmt.Errorf(`ent: validator failed for field "Track.track_id": %w`, err)}
		}
	}
	return nil
}

func (tuo *TrackUpdateOne) sqlSave(ctx context.Context) (_node *Track, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(track.Table, track.Columns, sqlgraph.NewFieldSpec(track.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Track.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, track.FieldID)
		for _, f := range fields {
			if !track.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != track.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(track.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.TrackID(); ok {
		_spec.SetField(track.FieldTrackID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(track.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Artists(); ok {
		_spec.SetField(track.FieldArtists, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedArtists(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, track.FieldArtists, value)
		})
	}
	if value, ok := tuo.mutation.ArtistsGenres(); ok {
		_spec.SetField(track.FieldArtistsGenres, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedArtistsGenres(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, track.FieldArtistsGenres, value)
		})
	}
	if value, ok := tuo.mutation.AlbumName(); ok {
		_spec.SetField(track.FieldAlbumName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.AlbumImageURI(); ok {
		_spec.SetField(track.FieldAlbumImageURI, field.TypeString, value)
	}
	if value, ok := tuo.mutation.DurationMs(); ok {
		_spec.SetField(track.FieldDurationMs, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.AddedDurationMs(); ok {
		_spec.AddField(track.FieldDurationMs, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.URI(); ok {
		_spec.SetField(track.FieldURI, field.TypeString, value)
	}
	_node = &Track{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{track.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

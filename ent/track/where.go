// Code generated by ent, DO NOT EDIT.

package track

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/albe2669/spotify-viewer/ent/predicate"
	"github.com/albe2669/spotify-viewer/ent/schema/pulid"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldUpdatedAt, v))
}

// TrackID applies equality check predicate on the "track_id" field. It's identical to TrackIDEQ.
func TrackID(v pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldTrackID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldName, v))
}

// AlbumName applies equality check predicate on the "album_name" field. It's identical to AlbumNameEQ.
func AlbumName(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldAlbumName, v))
}

// AlbumImageURI applies equality check predicate on the "album_image_uri" field. It's identical to AlbumImageURIEQ.
func AlbumImageURI(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldAlbumImageURI, v))
}

// DurationMs applies equality check predicate on the "duration_ms" field. It's identical to DurationMsEQ.
func DurationMs(v int32) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldDurationMs, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldURI, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldUpdatedAt, v))
}

// TrackIDEQ applies the EQ predicate on the "track_id" field.
func TrackIDEQ(v pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldTrackID, v))
}

// TrackIDNEQ applies the NEQ predicate on the "track_id" field.
func TrackIDNEQ(v pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldTrackID, v))
}

// TrackIDIn applies the In predicate on the "track_id" field.
func TrackIDIn(vs ...pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldTrackID, vs...))
}

// TrackIDNotIn applies the NotIn predicate on the "track_id" field.
func TrackIDNotIn(vs ...pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldTrackID, vs...))
}

// TrackIDGT applies the GT predicate on the "track_id" field.
func TrackIDGT(v pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldTrackID, v))
}

// TrackIDGTE applies the GTE predicate on the "track_id" field.
func TrackIDGTE(v pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldTrackID, v))
}

// TrackIDLT applies the LT predicate on the "track_id" field.
func TrackIDLT(v pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldTrackID, v))
}

// TrackIDLTE applies the LTE predicate on the "track_id" field.
func TrackIDLTE(v pulid.ID) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldTrackID, v))
}

// TrackIDContains applies the Contains predicate on the "track_id" field.
func TrackIDContains(v pulid.ID) predicate.Track {
	vc := string(v)
	return predicate.Track(sql.FieldContains(FieldTrackID, vc))
}

// TrackIDHasPrefix applies the HasPrefix predicate on the "track_id" field.
func TrackIDHasPrefix(v pulid.ID) predicate.Track {
	vc := string(v)
	return predicate.Track(sql.FieldHasPrefix(FieldTrackID, vc))
}

// TrackIDHasSuffix applies the HasSuffix predicate on the "track_id" field.
func TrackIDHasSuffix(v pulid.ID) predicate.Track {
	vc := string(v)
	return predicate.Track(sql.FieldHasSuffix(FieldTrackID, vc))
}

// TrackIDEqualFold applies the EqualFold predicate on the "track_id" field.
func TrackIDEqualFold(v pulid.ID) predicate.Track {
	vc := string(v)
	return predicate.Track(sql.FieldEqualFold(FieldTrackID, vc))
}

// TrackIDContainsFold applies the ContainsFold predicate on the "track_id" field.
func TrackIDContainsFold(v pulid.ID) predicate.Track {
	vc := string(v)
	return predicate.Track(sql.FieldContainsFold(FieldTrackID, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Track {
	return predicate.Track(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Track {
	return predicate.Track(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Track {
	return predicate.Track(sql.FieldContainsFold(FieldName, v))
}

// AlbumNameEQ applies the EQ predicate on the "album_name" field.
func AlbumNameEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldAlbumName, v))
}

// AlbumNameNEQ applies the NEQ predicate on the "album_name" field.
func AlbumNameNEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldAlbumName, v))
}

// AlbumNameIn applies the In predicate on the "album_name" field.
func AlbumNameIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldAlbumName, vs...))
}

// AlbumNameNotIn applies the NotIn predicate on the "album_name" field.
func AlbumNameNotIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldAlbumName, vs...))
}

// AlbumNameGT applies the GT predicate on the "album_name" field.
func AlbumNameGT(v string) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldAlbumName, v))
}

// AlbumNameGTE applies the GTE predicate on the "album_name" field.
func AlbumNameGTE(v string) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldAlbumName, v))
}

// AlbumNameLT applies the LT predicate on the "album_name" field.
func AlbumNameLT(v string) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldAlbumName, v))
}

// AlbumNameLTE applies the LTE predicate on the "album_name" field.
func AlbumNameLTE(v string) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldAlbumName, v))
}

// AlbumNameContains applies the Contains predicate on the "album_name" field.
func AlbumNameContains(v string) predicate.Track {
	return predicate.Track(sql.FieldContains(FieldAlbumName, v))
}

// AlbumNameHasPrefix applies the HasPrefix predicate on the "album_name" field.
func AlbumNameHasPrefix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasPrefix(FieldAlbumName, v))
}

// AlbumNameHasSuffix applies the HasSuffix predicate on the "album_name" field.
func AlbumNameHasSuffix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasSuffix(FieldAlbumName, v))
}

// AlbumNameEqualFold applies the EqualFold predicate on the "album_name" field.
func AlbumNameEqualFold(v string) predicate.Track {
	return predicate.Track(sql.FieldEqualFold(FieldAlbumName, v))
}

// AlbumNameContainsFold applies the ContainsFold predicate on the "album_name" field.
func AlbumNameContainsFold(v string) predicate.Track {
	return predicate.Track(sql.FieldContainsFold(FieldAlbumName, v))
}

// AlbumImageURIEQ applies the EQ predicate on the "album_image_uri" field.
func AlbumImageURIEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldAlbumImageURI, v))
}

// AlbumImageURINEQ applies the NEQ predicate on the "album_image_uri" field.
func AlbumImageURINEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldAlbumImageURI, v))
}

// AlbumImageURIIn applies the In predicate on the "album_image_uri" field.
func AlbumImageURIIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldAlbumImageURI, vs...))
}

// AlbumImageURINotIn applies the NotIn predicate on the "album_image_uri" field.
func AlbumImageURINotIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldAlbumImageURI, vs...))
}

// AlbumImageURIGT applies the GT predicate on the "album_image_uri" field.
func AlbumImageURIGT(v string) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldAlbumImageURI, v))
}

// AlbumImageURIGTE applies the GTE predicate on the "album_image_uri" field.
func AlbumImageURIGTE(v string) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldAlbumImageURI, v))
}

// AlbumImageURILT applies the LT predicate on the "album_image_uri" field.
func AlbumImageURILT(v string) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldAlbumImageURI, v))
}

// AlbumImageURILTE applies the LTE predicate on the "album_image_uri" field.
func AlbumImageURILTE(v string) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldAlbumImageURI, v))
}

// AlbumImageURIContains applies the Contains predicate on the "album_image_uri" field.
func AlbumImageURIContains(v string) predicate.Track {
	return predicate.Track(sql.FieldContains(FieldAlbumImageURI, v))
}

// AlbumImageURIHasPrefix applies the HasPrefix predicate on the "album_image_uri" field.
func AlbumImageURIHasPrefix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasPrefix(FieldAlbumImageURI, v))
}

// AlbumImageURIHasSuffix applies the HasSuffix predicate on the "album_image_uri" field.
func AlbumImageURIHasSuffix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasSuffix(FieldAlbumImageURI, v))
}

// AlbumImageURIEqualFold applies the EqualFold predicate on the "album_image_uri" field.
func AlbumImageURIEqualFold(v string) predicate.Track {
	return predicate.Track(sql.FieldEqualFold(FieldAlbumImageURI, v))
}

// AlbumImageURIContainsFold applies the ContainsFold predicate on the "album_image_uri" field.
func AlbumImageURIContainsFold(v string) predicate.Track {
	return predicate.Track(sql.FieldContainsFold(FieldAlbumImageURI, v))
}

// DurationMsEQ applies the EQ predicate on the "duration_ms" field.
func DurationMsEQ(v int32) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldDurationMs, v))
}

// DurationMsNEQ applies the NEQ predicate on the "duration_ms" field.
func DurationMsNEQ(v int32) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldDurationMs, v))
}

// DurationMsIn applies the In predicate on the "duration_ms" field.
func DurationMsIn(vs ...int32) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldDurationMs, vs...))
}

// DurationMsNotIn applies the NotIn predicate on the "duration_ms" field.
func DurationMsNotIn(vs ...int32) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldDurationMs, vs...))
}

// DurationMsGT applies the GT predicate on the "duration_ms" field.
func DurationMsGT(v int32) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldDurationMs, v))
}

// DurationMsGTE applies the GTE predicate on the "duration_ms" field.
func DurationMsGTE(v int32) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldDurationMs, v))
}

// DurationMsLT applies the LT predicate on the "duration_ms" field.
func DurationMsLT(v int32) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldDurationMs, v))
}

// DurationMsLTE applies the LTE predicate on the "duration_ms" field.
func DurationMsLTE(v int32) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldDurationMs, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.Track {
	return predicate.Track(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.Track {
	return predicate.Track(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.Track {
	return predicate.Track(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.Track {
	return predicate.Track(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.Track {
	return predicate.Track(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.Track {
	return predicate.Track(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.Track {
	return predicate.Track(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.Track {
	return predicate.Track(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.Track {
	return predicate.Track(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.Track {
	return predicate.Track(sql.FieldContainsFold(FieldURI, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Track) predicate.Track {
	return predicate.Track(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Track) predicate.Track {
	return predicate.Track(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Track) predicate.Track {
	return predicate.Track(sql.NotPredicates(p))
}

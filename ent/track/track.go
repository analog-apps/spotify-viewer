// Code generated by ent, DO NOT EDIT.

package track

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/albe2669/spotify-viewer/ent/schema/pulid"
)

const (
	// Label holds the string label denoting the track type in the database.
	Label = "track"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTrackID holds the string denoting the track_id field in the database.
	FieldTrackID = "track_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldArtists holds the string denoting the artists field in the database.
	FieldArtists = "artists"
	// FieldArtistsGenres holds the string denoting the artists_genres field in the database.
	FieldArtistsGenres = "artists_genres"
	// FieldAlbumName holds the string denoting the album_name field in the database.
	FieldAlbumName = "album_name"
	// FieldAlbumImageURI holds the string denoting the album_image_uri field in the database.
	FieldAlbumImageURI = "album_image_uri"
	// FieldDurationMs holds the string denoting the duration_ms field in the database.
	FieldDurationMs = "duration_ms"
	// FieldURI holds the string denoting the uri field in the database.
	FieldURI = "uri"
	// Table holds the table name of the track in the database.
	Table = "tracks"
)

// Columns holds all SQL columns for track fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTrackID,
	FieldName,
	FieldArtists,
	FieldArtistsGenres,
	FieldAlbumName,
	FieldAlbumImageURI,
	FieldDurationMs,
	FieldURI,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// TrackIDValidator is a validator for the "track_id" field. It is called by the builders before save.
	TrackIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the Track queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTrackID orders the results by the track_id field.
func ByTrackID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrackID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAlbumName orders the results by the album_name field.
func ByAlbumName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlbumName, opts...).ToFunc()
}

// ByAlbumImageURI orders the results by the album_image_uri field.
func ByAlbumImageURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlbumImageURI, opts...).ToFunc()
}

// ByDurationMs orders the results by the duration_ms field.
func ByDurationMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationMs, opts...).ToFunc()
}

// ByURI orders the results by the uri field.
func ByURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURI, opts...).ToFunc()
}

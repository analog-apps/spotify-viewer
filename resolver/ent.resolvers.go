package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/albe2669/spotify-viewer/ent"
	"github.com/albe2669/spotify-viewer/ent/schema/pulid"
	"github.com/albe2669/spotify-viewer/generated"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id pulid.ID) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []pulid.ID) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// TrackID is the resolver for the trackID field.
func (r *trackResolver) TrackID(ctx context.Context, obj *ent.Track) (string, error) {
	panic(fmt.Errorf("not implemented: TrackID - trackID"))
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Track returns generated.TrackResolver implementation.
func (r *Resolver) Track() generated.TrackResolver { return &trackResolver{r} }

type queryResolver struct{ *Resolver }
type trackResolver struct{ *Resolver }
